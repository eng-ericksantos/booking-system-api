# O nome do fluxo de trabalho, que aparecerá na aba "Actions" do GitHub
name: Booking System CI

# Define quando este fluxo de trabalho deve ser executado
on:
  # Executa em todo 'push' para a branch 'main'
  push:
    branches: [ "main" ]
  # Executa em toda abertura ou atualização de 'pull request' para a branch 'main'
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que serão executados
jobs:
  # Nosso job se chama 'build-and-test'
  build-and-test:
    # O tipo de máquina virtual que o GitHub vai usar para rodar nosso job
    runs-on: ubuntu-latest

    # Define os serviços que nosso job precisa. Neste caso, um banco de dados PostgreSQL.
    services:
      # O nome do serviço que podemos usar para nos conectar
      postgres:
        # A imagem Docker a ser usada (a mesma do nosso docker-compose)
        image: postgres:14-alpine
        # Variáveis de ambiente para o container do banco
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: booking_system_test
        # Mapeia a porta do container para a máquina virtual, para que nossa API possa se conectar
        ports:
          - 5432:5432
        # Opção para garantir que os testes só comecem depois que o banco estiver pronto
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Define os passos sequenciais que o nosso job irá executar
    steps:
      # Passo 1: Baixa o nosso código do repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Node.js na versão 18
      - name: Setup do Node.js
        uses: actions/setup-node@v4
        with:
          # node-version: '22'
          node-version-file: '.nvmrc'
          # Usa o cache do NPM para acelerar instalações futuras
          cache: 'npm'

      # Passo 3: Instala todas as dependências do projeto
      # 'npm ci' é uma versão mais rápida e segura do 'npm install', ideal para automação
      - name: Instalar dependências
        run: npm ci

      # Passo 4: Compila o código TypeScript para JavaScript para checar erros de tipo
      - name: Compilar o código
        run: npm run build
      
      # Passo 5: Executa as migrações no banco de dados de teste que criamos no 'services'
      # Definimos a DATABASE_URL aqui para garantir que os testes se conectem ao banco do workflow
      - name: Aplicar migrações de teste
        run: npm run db:test:migrate
        env:
          DATABASE_URL: "postgresql://admin:password123@localhost:5432/booking_system_test?schema=public"

      # Passo 6: Roda a nossa suíte de testes completa
      - name: Executar os testes
        run: npm test
        env:
          DATABASE_URL: "postgresql://admin:password123@localhost:5432/booking_system_test?schema=public"